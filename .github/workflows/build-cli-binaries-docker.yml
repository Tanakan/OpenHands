name: Build CLI Binaries (Docker)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        type: string
        default: 'manual'
      create_release:
        description: 'Create a release'
        required: false
        type: boolean
        default: true

jobs:
  build-in-docker:
    runs-on: ubuntu-latest  # または利用可能な任意のrunner
    strategy:
      matrix:
        include:
          - platform: linux
            arch: x86_64
            dockerfile: Dockerfile.build-linux
          - platform: windows
            arch: x86_64
            dockerfile: Dockerfile.build-windows
          - platform: darwin
            arch: x86_64
            dockerfile: Dockerfile.build-darwin

    steps:
    - uses: actions/checkout@v4

    - name: Create Dockerfile for ${{ matrix.platform }}
      run: |
        if [ "${{ matrix.platform }}" = "linux" ]; then
          cat > ${{ matrix.dockerfile }} <<'EOF'
        FROM python:3.12-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            g++ \
            make \
            curl \
            git \
            && rm -rf /var/lib/apt/lists/*
        
        # Install Poetry
        RUN curl -sSL https://install.python-poetry.org | python3 -
        ENV PATH="/root/.local/bin:$PATH"
        
        WORKDIR /app
        COPY . .
        
        # Install dependencies
        RUN poetry install --no-interaction --no-ansi
        RUN poetry run pip install pyinstaller
        
        # Build binary
        RUN poetry run pyinstaller openhands-cli.spec --clean --noconfirm
        
        # Package the binary
        RUN cd dist && tar -czf openhands-linux-x86_64.tar.gz openhands
        EOF
        
        elif [ "${{ matrix.platform }}" = "windows" ]; then
          cat > ${{ matrix.dockerfile }} <<'EOF'
        FROM python:3.12-windowsservercore
        
        # Install Poetry
        RUN powershell -Command \
            "(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python"
        ENV PATH="C:\\Users\\ContainerAdministrator\\AppData\\Roaming\\Python\\Scripts;$PATH"
        
        WORKDIR /app
        COPY . .
        
        # Install dependencies
        RUN poetry install --no-interaction --no-ansi
        RUN poetry run pip install pyinstaller
        
        # Build binary
        RUN poetry run pyinstaller openhands-cli.spec --clean --noconfirm
        
        # Package the binary
        WORKDIR /app/dist
        RUN powershell -Command "Compress-Archive -Path openhands.exe -DestinationPath openhands-windows-x86_64.zip"
        EOF
        
        elif [ "${{ matrix.platform }}" = "darwin" ]; then
          # macOS cross-compilation from Linux
          cat > ${{ matrix.dockerfile }} <<'EOF'
        FROM python:3.12-slim
        
        # Install system dependencies for cross-compilation
        RUN apt-get update && apt-get install -y \
            gcc \
            g++ \
            make \
            curl \
            git \
            clang \
            cmake \
            && rm -rf /var/lib/apt/lists/*
        
        # Install osxcross for macOS cross-compilation
        # Note: This is a simplified version. In practice, you'd need proper macOS SDK
        RUN echo "macOS cross-compilation requires macOS SDK and is complex to set up"
        
        # Install Poetry
        RUN curl -sSL https://install.python-poetry.org | python3 -
        ENV PATH="/root/.local/bin:$PATH"
        
        WORKDIR /app
        COPY . .
        
        # For now, we'll build a Linux binary and note that macOS requires different approach
        RUN poetry install --no-interaction --no-ansi
        RUN poetry run pip install pyinstaller
        RUN poetry run pyinstaller openhands-cli.spec --clean --noconfirm
        RUN cd dist && tar -czf openhands-darwin-x86_64.tar.gz openhands
        EOF
        fi

    - name: Build Docker image
      run: |
        docker build -f ${{ matrix.dockerfile }} -t openhands-build-${{ matrix.platform }} .

    - name: Extract binary from container
      run: |
        # Create container and copy artifacts
        docker create --name extract-${{ matrix.platform }} openhands-build-${{ matrix.platform }}
        
        if [ "${{ matrix.platform }}" = "windows" ]; then
          docker cp extract-${{ matrix.platform }}:/app/dist/openhands-windows-x86_64.zip ./
        else
          docker cp extract-${{ matrix.platform }}:/app/dist/openhands-${{ matrix.platform }}-x86_64.tar.gz ./
        fi
        
        docker rm extract-${{ matrix.platform }}
        
        # List extracted files
        ls -la openhands-*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openhands-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          openhands-*.tar.gz
          openhands-*.zip

  release:
    needs: build-in-docker
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate release tag
      id: generate_tag
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ "${{ github.event.inputs.version }}" == "manual" ]]; then
            TAG="docker-manual-$(date +'%Y%m%d-%H%M%S')"
          else
            TAG="${{ github.event.inputs.version }}"
          fi
        else
          TAG="${{ github.ref_name }}"
        fi
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.generate_tag.outputs.tag }}
        release_name: OpenHands CLI ${{ steps.generate_tag.outputs.tag }} (Docker Build)
        body: |
          ## OpenHands CLI Binary Release (Docker Build)
          
          This release includes pre-built binaries for:
          - **Linux** (x86_64) - Native build in Docker
          - **Windows** (x86_64) - Requires Windows containers support
          - **macOS** (x86_64) - Note: Currently builds Linux binary due to cross-compilation complexity
          
          ### Installation
          
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Make the binary executable (Unix systems): `chmod +x openhands*`
          4. Move to your PATH or run directly
          
          ### Usage
          
          ```bash
          openhands --help
          ```
          
          ### Note on macOS builds
          
          True macOS binaries require macOS SDK and proper code signing. The current Docker-based approach
          produces Linux binaries. For native macOS binaries, consider using a macOS runner or 
          cross-compilation toolchain with proper SDK.
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in artifacts/*/*; do
          if [[ -f "$file" ]]; then
            echo "Uploading $file"
            gh release upload "${{ steps.generate_tag.outputs.tag }}" "$file" --clobber
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}